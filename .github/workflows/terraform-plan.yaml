name: "Terraform"

on:
  workflow_call:
    inputs:
      terraform_version:
        required: true
        type: string
      terraform_api:
        required: true
        type: string
      github_username:
        required: true
        type: string
      github_email:
        required: true
        type: string
      github_org:
        required: true
        type: string
      github_server:
        required: false
        type: string
        default: github.com
      workspace:
        required: false
        type: string
      varfile:
        required: false
        type: string
      autoformat_message:
        default: "AutoFormat Commit"
        type: string
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
        type: string
    secrets:
      TFE_TOKEN:
        required: true
      GH_TOKEN:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: false
      GOOGLE_CREDENTIALS:
        required: false
    outputs:
      planfile:
        description: "Terraform Plan Output File"
        value: ${{ jobs.terraform.outputs.planfile }}
env:
  GITHUB_OWNER: ${{ inputs.github_org }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  
jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    outputs:
      planfile: ${{ inputs.workspace == '' &&  steps.plan_name_default.outputs.planfile || steps.plan_name_non_default.outputs.planfile }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: false
          
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
          cli_config_credentials_hostname: ${{ inputs.terraform_api }}

      - name: cleanup
        run: rm -rf .terraform || echo "no prior workspace"

      - name: Set Workspace
        if: ${{ inputs.workspace != '' }}
        run: |
          echo "TF_WORKSPACE=${{ inputs.workspace }}" >> $GITHUB_ENV

      - name: Set Varfile
        if: ${{ inputs.varfile != '' }}
        run: |
          echo "TF_CLI_ARGS=-var-file=${{ inputs.varfile }}" >> $GITHUB_ENV
          
      - name: Terraform Init
        id: init
        run: terraform init -upgrade
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Generate Plan Name (non-default)
        id: plan_name_non_default
        run: |
          echo planfile=${{ inputs.workspace }}-${{ github.run_id }}-${{ github.run_attempt }} >> $GITHUB_ENV
          echo planfile=${{ inputs.workspace }}-${{ github.run_id }}-${{ github.run_attempt }} >> $GITHUB_OUTPUT
        if: ${{ inputs.workspace != '' }}

      - name: Generate Plan Name (default)
        id: plan_name_default
        run: |
          echo planfile=default-${{ github.run_id }}-${{ github.run_attempt }} >> $GITHUB_ENV
          echo planfile=default-${{ github.run_id }}-${{ github.run_attempt }} >> $GITHUB_OUTPUT
        if: ${{ inputs.workspace == '' }}
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=${{ env.planfile }}

      - uses: actions/upload-artifact@master
        name: Archive Planfile
        if: github.ref == 'refs/heads/main'
        with:
          name: ${{ env.planfile }}
          path: ${{ env.planfile }}

      - uses: actions/upload-artifact@master
        name: Archive Configuration
        if: github.ref == 'refs/heads/main'
        with:
          name: ${{ env.planfile }}-tfdir
          path: ${{ github.workspace }}

      - uses: actions/upload-artifact@master
        name: Archive Lockfile
        if: github.ref == 'refs/heads/main'
        with:
          name: ${{ env.planfile }}-lockfile
          path: ${{ github.workspace }}/.terraform.lock.hcl

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Test \`${{ steps.test.outcome }}\`
            <details><summary>Test Output</summary>
      
            \`\`\`\n
            ${{ steps.test.outputs.stdout }}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
