name: "ModTest"

on:
  workflow_call:
    inputs:
      workspace:
        required: false
        type: string
      workspace_repo:
        required: true
        type: string
      workspace_branch:
        type: string
        required: false
        default: main
      github_server:
        required: true
        type: string
      github_org:
        required: true
        type: string
      mod_source:
        type: string
        required: true
      branch:
        type: string
        required: true
      terraform_version:
        type: string
        required: true
      terraform_api:
        type: string
        required: false
        default: app.terraform.io
      terraform_api_token_name:
        type: string
        required: false
        default: app_terraform_io
      terraform_login:
        type: boolean
        required: false
        default: true
      repo_clone_type:
        type: string
        required: false
        default: https
    secrets:
      TFE_TOKEN:
        required: true
      GH_TOKEN:
        required: true
env:
  GITHUB_OWNER: ${{ inputs.github_org }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
  
jobs:
  modtest:
    name: "Run modtest on target workspace"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: false
          token: ${{ secrets.GH_TOKEN }} # `GH_PAT` is a secret that contains your PAT

      - name: Checkout workspace repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.github_org }}/${{ inputs.workspace_repo }}
          path: ${{ inputs.workspace }}
          ref: ${{ inputs.workspace_branch }}
          token: ${{ secrets.GH_TOKEN }} # `GH_PAT` is a secret that contains your PAT


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        if: inputs.terraform_login
        with:
          terraform_version: ${{ inputs.terraform_version }}
          cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
          cli_config_credentials_hostname: ${{ inputs.terraform_api }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        if: inputs.terraform_login == false
        with:
          terraform_version: ${{ inputs.terraform_version }}
          
      - name: Download Dependenices
        run: |
          stat .modtest_bin 2>/dev/null >/dev/null || mkdir .modtest_bin
          curl -sSL https://raw.githubusercontent.com/HappyPathway/centralized-actions/main/modtest -o .modtest_bin/modtest
          curl -sSL https://raw.githubusercontent.com/HappyPathway/centralized-actions/main/testall -o .modtest_bin/testall
          curl -sSL https://raw.githubusercontent.com/HappyPathway/centralized-actions/main/mod_versions -o .modtest_bin/mod_versions
          echo "PATH=${PATH}:${PWD}/.modtest_bin" >> $GITHUB_ENV 
          chmod +x .modtest_bin/*

      - name: Set Workspace
        if: ${{ inputs.workspace != '' }}
        run: |
          echo "TF_WORKSPACE=${{ inputs.workspace }} >> $GITHUB_ENV"

      - name: Terraform Init
        id: init
        run: |
          terraform init
        working-directory: ${{ inputs.workspace }}

      - name: testall
        run: |
          testall ${{ inputs.github_server }} ${{ inputs.github_org }} ${{ inputs.mod_source }} ${{ inputs.branch }} ${{ inputs.repo_clone_type }}
        working-directory: ${{ inputs.workspace }}
      
      - name: terraform plan
        id: plan
        run: |
          terraform plan -input=false -no-color
        working-directory: ${{ inputs.workspace }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan (ModTest) ${{ inputs.workspace_repo }}/${{ inputs.workspace }}')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Plan (ModTest) ${{ inputs.workspace_repo }}/${{ inputs.workspace }}` \`${{ steps.show.outcome }}\`
      
            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Target Workspace: \`${{ inputs.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      
