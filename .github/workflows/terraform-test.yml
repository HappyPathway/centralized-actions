name: "Terraform"

on:
  workflow_call:
    inputs:
      terraform_version:
        required: true
        type: string
      terraform_api:
        required: true
        type: string
      github_username:
        required: true
        type: string
      github_email:
        required: true
        type: string
      github_org:
        required: true
        type: string
      github_server:
        required: false
        type: string
        default: github.com
      autoformat_message:
        default: "AutoFormat Commit"
        type: string
        required: false
      setup_terraform:
        type: boolean
        default: false
      workspace:
        required: false
        type: string
      terraform_init:
        type: boolean
        default: false
      varfile:
        required: false
        type: string
      AWS_ACCESS_KEY_ID:
        required: false
        type: string
      download_cache:
        type: boolean
        default: false
      cache:
        required: false
        type: string
      commit_sha:
        required: false
        type: string
    secrets:
      TFE_TOKEN:
        required: true
      GH_TOKEN:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: false
      GOOGLE_CREDENTIALS:
        required: false
    outputs:
      commit_sha:
        description: "Commit SHA"
        value: ${{ jobs.terraform.outputs.commit_sha }}
      
env:
  GITHUB_OWNER: ${{ inputs.github_org }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  
jobs:
  terraform:
    name: "Terraform Test"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    outputs:
      commit_sha: ${{ steps.checkout.outputs.commit }}
    steps:
      - uses: actions/checkout@v4
        id: checkout
        with:
          ref: ${{ inputs.commit_sha == '' && github.head_ref || inputs.commit_sha }}
          persist-credentials: false
          
      - uses: actions/download-artifact@master
        if: ${{ inputs.download_cache }}
        with:
          name: ${{ inputs.cache }}
          path: terraform_data

      - name: mkdir .terraform
        if: ${{ inputs.download_cache }}
        run: mkdir .terraform
        
      - name: set TF Data Dir
        if: ${{ inputs.download_cache }}
        run: mv terraform_data/terraform_dir/* .terraform/

      - name: fix file permissions
        run: chmod -R 777 .terraform
        if: ${{ inputs.download_cache }}

      - name: downoad lockfile
        uses: actions/download-artifact@master
        if: ${{ inputs.download_cache }}
        with:
          name: terraform_lockfile
          path: terraform_lockfile

      - name: move lockfile
        if: ${{ inputs.download_cache }}
        run: mv terraform_lockfile/.terraform.lock.hcl .

      - name: fix file permissions
        if: ${{ inputs.download_cache }}
        run: chmod -R 600 .terraform.lock.hcl
        
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        if: ${{ inputs.setup_terraform }}
        with:
          terraform_version: ${{ inputs.terraform_version }}
          cli_config_credentials_token: ${{ secrets.TFE_TOKEN }}
          cli_config_credentials_hostname: ${{ inputs.terraform_api }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt

      - name: Set Workspace
        if: ${{ inputs.workspace != '' }}
        run: |
          echo "TF_WORKSPACE=${{ inputs.workspace }}" >> $GITHUB_ENV

      - name: Set Varfile
        if: ${{ inputs.varfile != '' }}
        run: |
          echo "TF_CLI_ARGS=-var-file=${{ inputs.varfile }}" >> $GITHUB_ENV
          
      - name: Terraform Init
        id: init
        if: ${{ inputs.terraform_init }}
        run: terraform init -upgrade
          
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Test
        id: test
        run: terraform test -no-color

      - name: Render terraform docs inside the README.md and push changes back to PR branch
        uses: terraform-docs/gh-actions@v1.2.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          working-dir: .
          output-file: README.md
          output-method: inject

      # terraform-docs/gh-actions@v1.0.0 modifies .git files with owner root:root, and the following steps fail with
      # insufficient permission for adding an object to repository database .git/objects
      # since the expected user is runner:docker. See https://github.com/terraform-docs/gh-actions/issues/90
      - name: Fix .git owner
        run: sudo chown runner:docker -R .git

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && env.auto_format != 'true'
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Test \`${{ steps.test.outcome }}\`
            <details><summary>Test Output</summary>
      
            \`\`\`\n
            ${{ steps.test.outputs.stdout }}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
        
      - name: Commit & Push changes
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          if ! git diff-index --quiet HEAD; then 
            git status
            remote_repo="https://${{inputs.github_username}}:${{secrets.GH_TOKEN}}@${{ inputs.github_server }}/${{ github.repository }}.git"
            git remote add repo ${remote_repo}
            git config http.sslVerify false
            git config --local user.email "${{inputs.github_email}}"
            git config --local user.name "${{inputs.github_username}}"
            git add .
            git commit -m "${{inputs.autoformat_message}}"
            git push -u repo ${{ github.head_ref }}
            echo "auto_format=true" >> $GITHUB_ENV 
          fi
          
      - name: Autoformat Halt
        if: env.auto_format == 'true'
        run: exit 0
      
      - name: Terraform Test Status
        if: steps.test.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Init Status
        if: steps.init.outcome == 'failure'
        run: exit 1

      - name: Terraform FMT Status
        if: steps.fmt.outcome == 'failure'
        run: exit 1

      - name: Terraform Validate Status
        if: steps.validate.outcome == 'failure'
        run: exit 1
